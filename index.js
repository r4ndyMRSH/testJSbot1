//require('dotenv').config();
//const { Bot } = require('grammy');

//Telegrm Bot Testing
//TestJSBot
//pvlTest1bot

import dotenv from "dotenv";
import axios from "axios";
import { Bot, Keyboard, GrammyError, HttpError, InlineKeyboard } from "grammy";
//–ø–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
import { hydrate } from "@grammyjs/hydrate";

dotenv.config();

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

//–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥, –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ

bot.api.setMyCommands([
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
  },
  {
    command: "menu",
    description: "–ú–µ–Ω—é –±–æ—Ç–∞",
  },
  {
    command: "game",
    description: "–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã",
  },
  /* {
    command: "hello",
    description: "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ",
  }, */
  /*  {
    command: "mood",

    description: "–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
  }, */
  /*  {
    command: "share",
    description: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
  }, */
  /* {
    command: "inline",
    description: "test",
  }, */
  {
    command: "weather",
    description: "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞ –æ–∫–Ω–æ–º",
  },
  {
    command: "covid",
    description: "–ö–æ–≤–∏–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
  },
  {
    command: "link",
    description: "–°—Å—ã–ª–∫–∞ –≤ –≤–∏–¥–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
  },
]);

//adding event listener (ctx - context)
//–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
bot.command("start", async (ctx) => {
  await ctx.reply("Hello, i am your botü´°", {
    /*
    –í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ - –æ–±—ä–µ–∫—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ø–æ id —Å–æ–æ–±—â–µ–Ω–∏—è*/
    reply_parameters: { message_id: ctx.msg.message_id },
    //–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≤–∏–¥–µ –∫–æ–¥–∞ HTML
    parse_mode: "HTML",
    //–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä
    //disable_web_page_preview: true,
  });
});

//–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
bot.command("game", async (ctx) => {
  await ctx.replyWithGame("hl3_game");
});

//–º–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥
bot.command(["hello", "hi"], async (ctx) => {
  await ctx.reply(`Hello, ${ctx.from.first_name}:)`);
});

//–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–º–æ—â—å—é –∫–ª–∞—Å—Å–∞ Keyboard
bot.command("mood", async (ctx) => {
  const moodKey = new Keyboard().text("–•–æ—Ä–æ—à–æ").text("–ù–æ—Ä–º–∞–ª—å–Ω–æ").text("–ü–ª–æ—Ö–æ");
  //–ü–æ—Å–ª–µ row() –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –º–µ—Ç–æ–¥ resized() –ø–æ–¥–≥–æ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
  //oneTime() - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const moodKey2 = new Keyboard()
    .text("–•–æ—Ä–æ—à–æ")
    .row()
    .text("–ù–æ—Ä–º–∞–ª—å–Ω–æ")
    .row()
    .text("–ü–ª–æ—Ö–æ")
    .resized()
    .oneTime();
  await ctx.reply("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", {
    //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    reply_markup: moodKey2,
  });
});

bot.command("share", async (ctx) => {
  const shareKey = new Keyboard()
    .requestLocation("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è")
    .requestContact("–ö–æ–Ω—Ç–∞–∫—Ç")
    .requestPoll("–û–ø—Ä–æ—Å")
    .placeholder("–£–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ")
    .oneTime()
    .resized();

  await ctx.reply("–ß–µ–º –ø–æ–¥–µ–ª–∏—à—å—Å—è?", {
    reply_markup: shareKey,
  });
});

bot.command("weather", async (ctx) => {
  const reqKey = new Keyboard().requestLocation("–¢—ã–∫üìç").resized().oneTime();
  await ctx.reply("–ì–¥–µ —Ç—ã?", {
    reply_markup: reqKey,
  });
});

bot.command("covid", async (ctx) => {
  const result = await axios.get("https://disease.sh/v3/covid-19/all");
  //console.log(result.data);
  await ctx.reply(
    `–í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤: ${result.data.cases}\n–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: ${result.data.recovered}\n–°–º–µ—Ä—Ç–µ–π: ${result.data.deaths}`,
    {
      parse_mode: "HTML",
    }
  );
});

//–†–∞–±–æ—Ç–∞ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
bot.command("inline", async (ctx) => {
  const inlineKeyboard = new InlineKeyboard()
    .text("1", "button1")
    .text("2", "button2")
    .text("3", "button3");
  await ctx.reply("Answer", {
    reply_markup: inlineKeyboard,
  });
});

//–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ callbackQuery

bot.callbackQuery(["button1", "button2", "button3"], async (ctx) => {
  //–æ—Ç–≤–µ—Ç –Ω–∞ callbackQuery
  await ctx.answerCallbackQuery();
  await ctx.reply(`–¢—ã –Ω–∞–∂–∞–ª ${ctx.callbackQuery.data} –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ`);
});

//–ü—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ on, –µ–≥–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–Ω–æ–ø–æ–∫
/* bot.on("callback_query:data", async (ctx) => {
  await ctx.reply(`–¢—ã –Ω–∞–∂–∞–ª ${ctx.callbackQuery.data} –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ`);
});
 */

bot.command("link", async (ctx) => {
  const inLink = new InlineKeyboard().url(
    "–ü–µ—Ä–µ–π—Ç–∏–Ω–∞ —Å–∞–π—Ç",
    "https://www.youtube.com/"
  );
  await ctx.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
    reply_markup: inLink,
  });
});

//—Å–æ–∑–¥–∞—ë–º 2 –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const menuKeyboard = new InlineKeyboard()
  .text("Telegram ID", "userID")
  .text("–ü–æ–º–æ—â—å", "help");
const backKeyboard = new InlineKeyboard().text("< –ù–∞–∑–∞–¥", "back");
//–í—ã–∑–æ–≤ –º–µ–Ω—é
bot.command("menu", async (ctx) => {
  await ctx.reply("–ú–µ–Ω—é", {
    reply_markup: menuKeyboard,
  });
});

//–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞–∏—Ç–∏—è —Å –ø–æ–º–æ—â—å—é hydrate –ø–ª–∞–≥–∏–Ω–∞
bot.callbackQuery("userID", async (ctx) => {
  await ctx.callbackQuery.message.editText(`–¢–≤–æ–π ID: ${ctx.from.id}`, {
    reply_markup: backKeyboard,
  });
  await ctx.answerCallbackQuery();
});
bot.callbackQuery("help", async (ctx) => {
  await ctx.callbackQuery.message.editText(
    `–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–º–æ—â—å, –Ω–æ –º–Ω–µ –ª–µ–Ω—å —á—Ç–æ-—Ç–æ –ø–∏—Å–∞—Ç—å :)`,
    {
      reply_markup: backKeyboard,
    }
  );
  await ctx.answerCallbackQuery();
});
bot.callbackQuery("back", async (ctx) => {
  await ctx.callbackQuery.message.editText(`–ú–µ–Ω—é`, {
    reply_markup: menuKeyboard,
  });
  await ctx.answerCallbackQuery();
});

//–û—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.hears("–•–æ—Ä–æ—à–æ", async (ctx) => {
  await ctx.reply("–û—Ç–ª–∏—á–Ω–æ!");
});

bot.hears("–ù–æ—Ä–º–∞–ª—å–Ω–æ", async (ctx) => {
  await ctx.reply("–û—Ç–ª–∏—á–Ω–æ!");
});

//–º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ  –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
bot.hears([/–∂–æ–ø–∞/, /fuck/], async (ctx) => {
  await ctx.reply("–†—É–≥–∞—Ç—å—Å—è –æ—á–µ–Ω—å –Ω–µ –∫—Ä–∞—Å–∏–≤–æ!");
});
bot.hears([/–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ/, /–ü—Ä–∏–≤–µ—Ç/, /–ó–¥–∞—Ä–æ–≤–æ/, /–•–∞–π/], async (ctx) => {
  await ctx.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?");
});

bot.hears([/–°–ø–∞—Å–∏–±–æ/, /—Å–ø–∞—Å–∏–±–æ/], async (ctx) => {
  //–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã—Ä–µ–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å —Å–ø—É—Å—Ç—è –≤—Ä–µ–º—è
  setTimeout(() => {
    //react –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç "—Ä–µ–∞–∫—Ü–∏–∏" –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    ctx.react("üëç");
  }, 1500);
});

//–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (–Ω—É–∂–Ω—ã GrammyError, HttpError)

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling updaate ${ctx.update.update_id}`);
  const e = err.error;

  //–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫ –∫–∞–∫–æ–º—É —Ç–∏–ø—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ—à–∏–±–∫–∞
  if (e instanceof GrammyError) {
    console.log("Error  in request:", e.description);
  } else if (e instanceof HttpError) {
    console.log("Coul dnot contact Telegram:", e);
  } else {
    console.log("Unknown error", e);
  }
});

//–û—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤)
//–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä, –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
//—Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ –≤ —Å–ª—É—á–∞–µ —Å –∫–æ–º–º–∞–Ω–¥–∞–º–∏ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–∞—Å—Å–∏–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

//–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º—ã –ø–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ –≥–¥–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏
//–º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ "::url"
bot.on(["message:entities:url", "::email"], async (ctx) => {
  await ctx.reply("–ü–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É");
});

bot.on(":contact", async (ctx) => {
  await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç");
  console.log(ctx.msg.contact.phone_number);
});

//–æ—Ç–≤–µ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é  –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
bot.on(":location", async (ctx) => {
  console.log(ctx.msg.location);
  const loc = [ctx.msg.location.latitude, ctx.msg.location.longitude];
  console.log(loc);
  const weather = await axios.get(
    `https://api.weatherbit.io/v2.0/current?lat=${loc[0]}&lon=${loc[1]}&key=${process.env.WEATHER_BIT_API_KEY}`
  );
  console.log(weather.data.data[0].app_temp);
  let temp = weather.data.data[0].app_temp;
  await ctx.reply(`–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ ${weather.data.data[0].app_temp} ‚ÑÉ`, {
    //–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–∞–µ—Ç
    reply_markup: { remove_keyboard: true },
  });
});

bot.on("message:text", async (ctx) => {
  //–º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ (:text)
  let a = ctx.from.first_name;
  console.log(ctx.msg);
  await ctx.reply("–ß–∏—Ç–∞—é");
  await ctx.reply(JSON.stringify(ctx.msg));
});

//–∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
bot.on(":photo").on("::hashtag", async (ctx) => {
  await ctx.reply("–ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ —Å —Ö–µ—à—Ç–µ–≥–æ–º");
});
bot.on("message:photo", async (ctx) => {
  await ctx.reply("Cool picture, man!");
});
bot.on("message:voice", async (ctx) => {
  await ctx.reply("Nice voice:)");
});

bot.on("callback_query:game_short_name", async (ctx) => {
  await ctx.answerCallbackQuery({ url:"https://t-rex-f6jx.onrender.com/"});
});


//starting bot
bot.start();
